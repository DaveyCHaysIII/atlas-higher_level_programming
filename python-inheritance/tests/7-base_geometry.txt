'Tests for 7-base_geometry.py'

'Testing the functions integer_validator() and area() of class BaseGeometry()'

>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
>>> a = BaseGeometry()

//Function: area()

'Testing area() base case'
>>> a.area()
Traceback (most recent call last):
...
Exception: area() is not implemented


//Function: integer_validator()

'Testing base case'
::
>>> a.integer_validator()
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

'Testing no number passed'
::
>>> a.integer_validator("age")
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

'Testing zero value passed'
::
>>> a.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

'Testing negative value passed'
::
>>> a.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

'Testing alternative type passed'
::
>>> a.integer_validator("age", 0.5)
Traceback (most recent call last):
...
TypeError: age must be an integer
::
>>> a.integer_validator("age", "1")
Traceback (most recent call last):
...
TypeError: age must be an integer
::
>>> a.integer_validator("age", [1, 2])
Traceback (most recent call last):
...
TypeError: age must be an integer
::
>>> a.integer_validator("age", (1, 2))
Traceback (most recent call last):
...
TypeError: age must be an integer
::
>>> a.integer_validator("age", {1, 2})
Traceback (most recent call last):
...
TypeError: age must be an integer